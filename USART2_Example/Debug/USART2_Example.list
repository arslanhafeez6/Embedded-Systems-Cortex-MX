
USART2_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001334  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080014f8  080014f8  000114f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001500  08001500  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001500  08001500  00011500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001508  08001508  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001508  08001508  00011508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800150c  0800150c  0001150c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  2000000c  0800151c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  0800151c  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000544f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f4c  00000000  00000000  0002548b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000568  00000000  00000000  000263d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004e0  00000000  00000000  00026940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f1e1  00000000  00000000  00026e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000047c2  00000000  00000000  00046001  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3405  00000000  00000000  0004a7c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010dbc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001540  00000000  00000000  0010dc44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080014e0 	.word	0x080014e0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080014e0 	.word	0x080014e0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
void Error_handler(void);

UART_HandleTypeDef huart2;

int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_Init();
 8000508:	f000 f8d2 	bl	80006b0 <HAL_Init>
	SystemClockConfig();
 800050c:	f000 f805 	bl	800051a <SystemClockConfig>
	UART_Init();
 8000510:	f000 f80a 	bl	8000528 <UART_Init>

	return 0;
 8000514:	2300      	movs	r3, #0
}
 8000516:	4618      	mov	r0, r3
 8000518:	bd80      	pop	{r7, pc}

0800051a <SystemClockConfig>:

void SystemClockConfig(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0

}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <UART_Init>:
// High level USART2 periphiral initialisations
void UART_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <UART_Init+0x44>)
 800052e:	4a10      	ldr	r2, [pc, #64]	; (8000570 <UART_Init+0x48>)
 8000530:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <UART_Init+0x44>)
 8000534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000538:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <UART_Init+0x44>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <UART_Init+0x44>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <UART_Init+0x44>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <UART_Init+0x44>)
 800054e:	2200      	movs	r2, #0
 8000550:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <UART_Init+0x44>)
 8000554:	220c      	movs	r2, #12
 8000556:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&huart2) != HAL_OK )
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <UART_Init+0x44>)
 800055a:	f000 fbd3 	bl	8000d04 <HAL_UART_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <UART_Init+0x40>
	{
		Error_handler();
 8000564:	f000 f806 	bl	8000574 <Error_handler>
	}
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000028 	.word	0x20000028
 8000570:	40004400 	.word	0x40004400

08000574 <Error_handler>:


void Error_handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	while(1);
 8000578:	e7fe      	b.n	8000578 <Error_handler+0x4>
	...

0800057c <HAL_MspInit>:

#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  // Low level processor initialisations

   // 1. Setup the priority grouping of the arm cortex mx processor.
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //By default preempt priority is to set 4 bits. This line is redundant here.
 8000580:	2003      	movs	r0, #3
 8000582:	f000 f9b7 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>

   // 2. Enable the required system exceptions of the arm  cortex mx processor.
	SCB->SHCSR |= 0*7 << 16; // enabled usage fault, mem fault & bus fault system exceptions.
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_MspInit+0x3c>)
 8000588:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <HAL_MspInit+0x3c>)
 800058a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800058c:	6253      	str	r3, [r2, #36]	; 0x24

   // 3. Configure the priority for the system exceptions.
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	f06f 000b 	mvn.w	r0, #11
 8000596:	f000 f9b8 	bl	800090a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn , 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	f06f 000a 	mvn.w	r0, #10
 80005a2:	f000 f9b2 	bl	800090a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	f06f 0009 	mvn.w	r0, #9
 80005ae:	f000 f9ac 	bl	800090a <HAL_NVIC_SetPriority>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
  // Low level USART2 peripheral initialisations.
	//1. Enable the clock for USART2 peripheral.
	__HAL_RCC_USART2_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <HAL_UART_MspInit+0x6c>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a16      	ldr	r2, [pc, #88]	; (8000628 <HAL_UART_MspInit+0x6c>)
 80005ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <HAL_UART_MspInit+0x6c>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
	//2. Do the pin muxing configuration of USART2 on GPIO.
	gpio_uart.Pin = GPIO_PIN_2;			//Configuring Pin 2 TX
 80005e0:	2304      	movs	r3, #4
 80005e2:	60fb      	str	r3, [r7, #12]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80005e4:	2302      	movs	r3, #2
 80005e6:	613b      	str	r3, [r7, #16]
	gpio_uart.Pull = GPIO_PULLUP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 80005f0:	2307      	movs	r3, #7
 80005f2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpio_uart );
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	480c      	ldr	r0, [pc, #48]	; (800062c <HAL_UART_MspInit+0x70>)
 80005fc:	f000 f9bc 	bl	8000978 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;			//Configuring Pin 3 RX
 8000600:	2308      	movs	r3, #8
 8000602:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &gpio_uart );
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	4619      	mov	r1, r3
 800060a:	4808      	ldr	r0, [pc, #32]	; (800062c <HAL_UART_MspInit+0x70>)
 800060c:	f000 f9b4 	bl	8000978 <HAL_GPIO_Init>

	//3. Enable the IRQ and setup the priority (NVIC settings).
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000610:	2026      	movs	r0, #38	; 0x26
 8000612:	f000 f996 	bl	8000942 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	210f      	movs	r1, #15
 800061a:	2026      	movs	r0, #38	; 0x26
 800061c:	f000 f975 	bl	800090a <HAL_NVIC_SetPriority>
}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40020000 	.word	0x40020000

08000630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <SystemInit+0x28>)
 8000636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800063a:	4a07      	ldr	r2, [pc, #28]	; (8000658 <SystemInit+0x28>)
 800063c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <SystemInit+0x28>)
 8000646:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800064a:	609a      	str	r2, [r3, #8]
#endif
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800065c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000694 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000660:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000662:	e003      	b.n	800066c <LoopCopyDataInit>

08000664 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000666:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000668:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800066a:	3104      	adds	r1, #4

0800066c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000670:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000672:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000674:	d3f6      	bcc.n	8000664 <CopyDataInit>
  ldr  r2, =_sbss
 8000676:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000678:	e002      	b.n	8000680 <LoopFillZerobss>

0800067a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800067a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800067c:	f842 3b04 	str.w	r3, [r2], #4

08000680 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000682:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000684:	d3f9      	bcc.n	800067a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000686:	f7ff ffd3 	bl	8000630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800068a:	f000 ff05 	bl	8001498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800068e:	f7ff ff39 	bl	8000504 <main>
  bx  lr    
 8000692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000694:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000698:	08001510 	.word	0x08001510
  ldr  r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80006a0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80006a4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80006a8:	20000068 	.word	0x20000068

080006ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC_IRQHandler>
	...

080006b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_Init+0x40>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <HAL_Init+0x40>)
 80006ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <HAL_Init+0x40>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <HAL_Init+0x40>)
 80006c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_Init+0x40>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <HAL_Init+0x40>)
 80006d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d8:	2003      	movs	r0, #3
 80006da:	f000 f90b 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 f808 	bl	80006f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e4:	f7ff ff4a 	bl	800057c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023c00 	.word	0x40023c00

080006f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_InitTick+0x54>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_InitTick+0x58>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	fbb3 f3f1 	udiv	r3, r3, r1
 800070e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f923 	bl	800095e <HAL_SYSTICK_Config>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e00e      	b.n	8000740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d80a      	bhi.n	800073e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000728:	2200      	movs	r2, #0
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f000 f8eb 	bl	800090a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <HAL_InitTick+0x5c>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800073a:	2300      	movs	r3, #0
 800073c:	e000      	b.n	8000740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000000 	.word	0x20000000
 800074c:	20000008 	.word	0x20000008
 8000750:	20000004 	.word	0x20000004

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	db0b      	blt.n	80007e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f003 021f 	and.w	r2, r3, #31
 80007d0:	4907      	ldr	r1, [pc, #28]	; (80007f0 <__NVIC_EnableIRQ+0x38>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	2001      	movs	r0, #1
 80007da:	fa00 f202 	lsl.w	r2, r0, r2
 80007de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000e100 	.word	0xe000e100

080007f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db0a      	blt.n	800081e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	490c      	ldr	r1, [pc, #48]	; (8000840 <__NVIC_SetPriority+0x4c>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	440b      	add	r3, r1
 8000818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800081c:	e00a      	b.n	8000834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4908      	ldr	r1, [pc, #32]	; (8000844 <__NVIC_SetPriority+0x50>)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	3b04      	subs	r3, #4
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	440b      	add	r3, r1
 8000832:	761a      	strb	r2, [r3, #24]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000e100 	.word	0xe000e100
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	; 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	f1c3 0307 	rsb	r3, r3, #7
 8000862:	2b04      	cmp	r3, #4
 8000864:	bf28      	it	cs
 8000866:	2304      	movcs	r3, #4
 8000868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	2b06      	cmp	r3, #6
 8000870:	d902      	bls.n	8000878 <NVIC_EncodePriority+0x30>
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3b03      	subs	r3, #3
 8000876:	e000      	b.n	800087a <NVIC_EncodePriority+0x32>
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	f04f 32ff 	mov.w	r2, #4294967295
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43da      	mvns	r2, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000890:	f04f 31ff 	mov.w	r1, #4294967295
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43d9      	mvns	r1, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	4313      	orrs	r3, r2
         );
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3724      	adds	r7, #36	; 0x24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c0:	d301      	bcc.n	80008c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00f      	b.n	80008e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <SysTick_Config+0x40>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ce:	210f      	movs	r1, #15
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f7ff ff8e 	bl	80007f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <SysTick_Config+0x40>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <SysTick_Config+0x40>)
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff29 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800091c:	f7ff ff3e 	bl	800079c <__NVIC_GetPriorityGrouping>
 8000920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68b9      	ldr	r1, [r7, #8]
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff ff8e 	bl	8000848 <NVIC_EncodePriority>
 800092c:	4602      	mov	r2, r0
 800092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff5d 	bl	80007f4 <__NVIC_SetPriority>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff31 	bl	80007b8 <__NVIC_EnableIRQ>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ffa2 	bl	80008b0 <SysTick_Config>
 800096c:	4603      	mov	r3, r0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
 8000992:	e165      	b.n	8000c60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000994:	2201      	movs	r2, #1
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	4013      	ands	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	f040 8154 	bne.w	8000c5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d00b      	beq.n	80009d2 <HAL_GPIO_Init+0x5a>
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d007      	beq.n	80009d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c6:	2b11      	cmp	r3, #17
 80009c8:	d003      	beq.n	80009d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	2b12      	cmp	r3, #18
 80009d0:	d130      	bne.n	8000a34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	2203      	movs	r2, #3
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4013      	ands	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	68da      	ldr	r2, [r3, #12]
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a08:	2201      	movs	r2, #1
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	4013      	ands	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	091b      	lsrs	r3, r3, #4
 8000a1e:	f003 0201 	and.w	r2, r3, #1
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	2203      	movs	r2, #3
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	689a      	ldr	r2, [r3, #8]
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d003      	beq.n	8000a74 <HAL_GPIO_Init+0xfc>
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2b12      	cmp	r3, #18
 8000a72:	d123      	bne.n	8000abc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	08da      	lsrs	r2, r3, #3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3208      	adds	r2, #8
 8000a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	220f      	movs	r2, #15
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	4013      	ands	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	691a      	ldr	r2, [r3, #16]
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	08da      	lsrs	r2, r3, #3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3208      	adds	r2, #8
 8000ab6:	69b9      	ldr	r1, [r7, #24]
 8000ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f003 0203 	and.w	r2, r3, #3
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f000 80ae 	beq.w	8000c5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b5c      	ldr	r3, [pc, #368]	; (8000c74 <HAL_GPIO_Init+0x2fc>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a5b      	ldr	r2, [pc, #364]	; (8000c74 <HAL_GPIO_Init+0x2fc>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b59      	ldr	r3, [pc, #356]	; (8000c74 <HAL_GPIO_Init+0x2fc>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b1a:	4a57      	ldr	r2, [pc, #348]	; (8000c78 <HAL_GPIO_Init+0x300>)
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	3302      	adds	r3, #2
 8000b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f003 0303 	and.w	r3, r3, #3
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	220f      	movs	r2, #15
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a4e      	ldr	r2, [pc, #312]	; (8000c7c <HAL_GPIO_Init+0x304>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d025      	beq.n	8000b92 <HAL_GPIO_Init+0x21a>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a4d      	ldr	r2, [pc, #308]	; (8000c80 <HAL_GPIO_Init+0x308>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d01f      	beq.n	8000b8e <HAL_GPIO_Init+0x216>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a4c      	ldr	r2, [pc, #304]	; (8000c84 <HAL_GPIO_Init+0x30c>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d019      	beq.n	8000b8a <HAL_GPIO_Init+0x212>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a4b      	ldr	r2, [pc, #300]	; (8000c88 <HAL_GPIO_Init+0x310>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d013      	beq.n	8000b86 <HAL_GPIO_Init+0x20e>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a4a      	ldr	r2, [pc, #296]	; (8000c8c <HAL_GPIO_Init+0x314>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d00d      	beq.n	8000b82 <HAL_GPIO_Init+0x20a>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a49      	ldr	r2, [pc, #292]	; (8000c90 <HAL_GPIO_Init+0x318>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d007      	beq.n	8000b7e <HAL_GPIO_Init+0x206>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a48      	ldr	r2, [pc, #288]	; (8000c94 <HAL_GPIO_Init+0x31c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_GPIO_Init+0x202>
 8000b76:	2306      	movs	r3, #6
 8000b78:	e00c      	b.n	8000b94 <HAL_GPIO_Init+0x21c>
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	e00a      	b.n	8000b94 <HAL_GPIO_Init+0x21c>
 8000b7e:	2305      	movs	r3, #5
 8000b80:	e008      	b.n	8000b94 <HAL_GPIO_Init+0x21c>
 8000b82:	2304      	movs	r3, #4
 8000b84:	e006      	b.n	8000b94 <HAL_GPIO_Init+0x21c>
 8000b86:	2303      	movs	r3, #3
 8000b88:	e004      	b.n	8000b94 <HAL_GPIO_Init+0x21c>
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	e002      	b.n	8000b94 <HAL_GPIO_Init+0x21c>
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e000      	b.n	8000b94 <HAL_GPIO_Init+0x21c>
 8000b92:	2300      	movs	r3, #0
 8000b94:	69fa      	ldr	r2, [r7, #28]
 8000b96:	f002 0203 	and.w	r2, r2, #3
 8000b9a:	0092      	lsls	r2, r2, #2
 8000b9c:	4093      	lsls	r3, r2
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ba4:	4934      	ldr	r1, [pc, #208]	; (8000c78 <HAL_GPIO_Init+0x300>)
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	3302      	adds	r3, #2
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bb2:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <HAL_GPIO_Init+0x320>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000bd6:	4a30      	ldr	r2, [pc, #192]	; (8000c98 <HAL_GPIO_Init+0x320>)
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	; (8000c98 <HAL_GPIO_Init+0x320>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	43db      	mvns	r3, r3
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4013      	ands	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c00:	4a25      	ldr	r2, [pc, #148]	; (8000c98 <HAL_GPIO_Init+0x320>)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c06:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <HAL_GPIO_Init+0x320>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4013      	ands	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c2a:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <HAL_GPIO_Init+0x320>)
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_GPIO_Init+0x320>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c54:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_GPIO_Init+0x320>)
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	61fb      	str	r3, [r7, #28]
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	2b0f      	cmp	r3, #15
 8000c64:	f67f ae96 	bls.w	8000994 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3724      	adds	r7, #36	; 0x24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40013800 	.word	0x40013800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40020400 	.word	0x40020400
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40020c00 	.word	0x40020c00
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40021400 	.word	0x40021400
 8000c94:	40021800 	.word	0x40021800
 8000c98:	40013c00 	.word	0x40013c00

08000c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000000 	.word	0x20000000

08000cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000cb8:	f7ff fff0 	bl	8000c9c <HAL_RCC_GetHCLKFreq>
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	0a9b      	lsrs	r3, r3, #10
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	4a03      	ldr	r2, [pc, #12]	; (8000cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	080014f8 	.word	0x080014f8

08000cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000ce0:	f7ff ffdc 	bl	8000c9c <HAL_RCC_GetHCLKFreq>
 8000ce4:	4601      	mov	r1, r0
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	0b5b      	lsrs	r3, r3, #13
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	080014f8 	.word	0x080014f8

08000d04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e03f      	b.n	8000d96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d106      	bne.n	8000d30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff fc46 	bl	80005bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2224      	movs	r2, #36	; 0x24
 8000d34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68da      	ldr	r2, [r3, #12]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000d46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 f829 	bl	8000da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	691a      	ldr	r2, [r3, #16]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000d5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	695a      	ldr	r2, [r3, #20]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000d6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2220      	movs	r2, #32
 8000d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2220      	movs	r2, #32
 8000d90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da4:	b085      	sub	sp, #20
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69db      	ldr	r3, [r3, #28]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8000de2:	f023 030c 	bic.w	r3, r3, #12
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	68f9      	ldr	r1, [r7, #12]
 8000dec:	430b      	orrs	r3, r1
 8000dee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	699a      	ldr	r2, [r3, #24]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	430a      	orrs	r2, r1
 8000e04:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e0e:	f040 818b 	bne.w	8001128 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4ac1      	ldr	r2, [pc, #772]	; (800111c <UART_SetConfig+0x37c>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d005      	beq.n	8000e28 <UART_SetConfig+0x88>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4abf      	ldr	r2, [pc, #764]	; (8001120 <UART_SetConfig+0x380>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	f040 80bd 	bne.w	8000fa2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000e28:	f7ff ff58 	bl	8000cdc <HAL_RCC_GetPCLK2Freq>
 8000e2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	461d      	mov	r5, r3
 8000e32:	f04f 0600 	mov.w	r6, #0
 8000e36:	46a8      	mov	r8, r5
 8000e38:	46b1      	mov	r9, r6
 8000e3a:	eb18 0308 	adds.w	r3, r8, r8
 8000e3e:	eb49 0409 	adc.w	r4, r9, r9
 8000e42:	4698      	mov	r8, r3
 8000e44:	46a1      	mov	r9, r4
 8000e46:	eb18 0805 	adds.w	r8, r8, r5
 8000e4a:	eb49 0906 	adc.w	r9, r9, r6
 8000e4e:	f04f 0100 	mov.w	r1, #0
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8000e5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8000e5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8000e62:	4688      	mov	r8, r1
 8000e64:	4691      	mov	r9, r2
 8000e66:	eb18 0005 	adds.w	r0, r8, r5
 8000e6a:	eb49 0106 	adc.w	r1, r9, r6
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	461d      	mov	r5, r3
 8000e74:	f04f 0600 	mov.w	r6, #0
 8000e78:	196b      	adds	r3, r5, r5
 8000e7a:	eb46 0406 	adc.w	r4, r6, r6
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4623      	mov	r3, r4
 8000e82:	f7ff f9bf 	bl	8000204 <__aeabi_uldivmod>
 8000e86:	4603      	mov	r3, r0
 8000e88:	460c      	mov	r4, r1
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4ba5      	ldr	r3, [pc, #660]	; (8001124 <UART_SetConfig+0x384>)
 8000e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	461d      	mov	r5, r3
 8000e9c:	f04f 0600 	mov.w	r6, #0
 8000ea0:	46a9      	mov	r9, r5
 8000ea2:	46b2      	mov	sl, r6
 8000ea4:	eb19 0309 	adds.w	r3, r9, r9
 8000ea8:	eb4a 040a 	adc.w	r4, sl, sl
 8000eac:	4699      	mov	r9, r3
 8000eae:	46a2      	mov	sl, r4
 8000eb0:	eb19 0905 	adds.w	r9, r9, r5
 8000eb4:	eb4a 0a06 	adc.w	sl, sl, r6
 8000eb8:	f04f 0100 	mov.w	r1, #0
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000ec4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8000ec8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8000ecc:	4689      	mov	r9, r1
 8000ece:	4692      	mov	sl, r2
 8000ed0:	eb19 0005 	adds.w	r0, r9, r5
 8000ed4:	eb4a 0106 	adc.w	r1, sl, r6
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	461d      	mov	r5, r3
 8000ede:	f04f 0600 	mov.w	r6, #0
 8000ee2:	196b      	adds	r3, r5, r5
 8000ee4:	eb46 0406 	adc.w	r4, r6, r6
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4623      	mov	r3, r4
 8000eec:	f7ff f98a 	bl	8000204 <__aeabi_uldivmod>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	460c      	mov	r4, r1
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b8b      	ldr	r3, [pc, #556]	; (8001124 <UART_SetConfig+0x384>)
 8000ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8000efc:	095b      	lsrs	r3, r3, #5
 8000efe:	2164      	movs	r1, #100	; 0x64
 8000f00:	fb01 f303 	mul.w	r3, r1, r3
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	3332      	adds	r3, #50	; 0x32
 8000f0a:	4a86      	ldr	r2, [pc, #536]	; (8001124 <UART_SetConfig+0x384>)
 8000f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f10:	095b      	lsrs	r3, r3, #5
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000f18:	4498      	add	r8, r3
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	f04f 0600 	mov.w	r6, #0
 8000f22:	46a9      	mov	r9, r5
 8000f24:	46b2      	mov	sl, r6
 8000f26:	eb19 0309 	adds.w	r3, r9, r9
 8000f2a:	eb4a 040a 	adc.w	r4, sl, sl
 8000f2e:	4699      	mov	r9, r3
 8000f30:	46a2      	mov	sl, r4
 8000f32:	eb19 0905 	adds.w	r9, r9, r5
 8000f36:	eb4a 0a06 	adc.w	sl, sl, r6
 8000f3a:	f04f 0100 	mov.w	r1, #0
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000f46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8000f4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8000f4e:	4689      	mov	r9, r1
 8000f50:	4692      	mov	sl, r2
 8000f52:	eb19 0005 	adds.w	r0, r9, r5
 8000f56:	eb4a 0106 	adc.w	r1, sl, r6
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	461d      	mov	r5, r3
 8000f60:	f04f 0600 	mov.w	r6, #0
 8000f64:	196b      	adds	r3, r5, r5
 8000f66:	eb46 0406 	adc.w	r4, r6, r6
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4623      	mov	r3, r4
 8000f6e:	f7ff f949 	bl	8000204 <__aeabi_uldivmod>
 8000f72:	4603      	mov	r3, r0
 8000f74:	460c      	mov	r4, r1
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b6a      	ldr	r3, [pc, #424]	; (8001124 <UART_SetConfig+0x384>)
 8000f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2164      	movs	r1, #100	; 0x64
 8000f82:	fb01 f303 	mul.w	r3, r1, r3
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	3332      	adds	r3, #50	; 0x32
 8000f8c:	4a65      	ldr	r2, [pc, #404]	; (8001124 <UART_SetConfig+0x384>)
 8000f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	f003 0207 	and.w	r2, r3, #7
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4442      	add	r2, r8
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	e26f      	b.n	8001482 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000fa2:	f7ff fe87 	bl	8000cb4 <HAL_RCC_GetPCLK1Freq>
 8000fa6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	461d      	mov	r5, r3
 8000fac:	f04f 0600 	mov.w	r6, #0
 8000fb0:	46a8      	mov	r8, r5
 8000fb2:	46b1      	mov	r9, r6
 8000fb4:	eb18 0308 	adds.w	r3, r8, r8
 8000fb8:	eb49 0409 	adc.w	r4, r9, r9
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	46a1      	mov	r9, r4
 8000fc0:	eb18 0805 	adds.w	r8, r8, r5
 8000fc4:	eb49 0906 	adc.w	r9, r9, r6
 8000fc8:	f04f 0100 	mov.w	r1, #0
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8000fd4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8000fd8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8000fdc:	4688      	mov	r8, r1
 8000fde:	4691      	mov	r9, r2
 8000fe0:	eb18 0005 	adds.w	r0, r8, r5
 8000fe4:	eb49 0106 	adc.w	r1, r9, r6
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	461d      	mov	r5, r3
 8000fee:	f04f 0600 	mov.w	r6, #0
 8000ff2:	196b      	adds	r3, r5, r5
 8000ff4:	eb46 0406 	adc.w	r4, r6, r6
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4623      	mov	r3, r4
 8000ffc:	f7ff f902 	bl	8000204 <__aeabi_uldivmod>
 8001000:	4603      	mov	r3, r0
 8001002:	460c      	mov	r4, r1
 8001004:	461a      	mov	r2, r3
 8001006:	4b47      	ldr	r3, [pc, #284]	; (8001124 <UART_SetConfig+0x384>)
 8001008:	fba3 2302 	umull	r2, r3, r3, r2
 800100c:	095b      	lsrs	r3, r3, #5
 800100e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	461d      	mov	r5, r3
 8001016:	f04f 0600 	mov.w	r6, #0
 800101a:	46a9      	mov	r9, r5
 800101c:	46b2      	mov	sl, r6
 800101e:	eb19 0309 	adds.w	r3, r9, r9
 8001022:	eb4a 040a 	adc.w	r4, sl, sl
 8001026:	4699      	mov	r9, r3
 8001028:	46a2      	mov	sl, r4
 800102a:	eb19 0905 	adds.w	r9, r9, r5
 800102e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001032:	f04f 0100 	mov.w	r1, #0
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800103e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001042:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001046:	4689      	mov	r9, r1
 8001048:	4692      	mov	sl, r2
 800104a:	eb19 0005 	adds.w	r0, r9, r5
 800104e:	eb4a 0106 	adc.w	r1, sl, r6
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	461d      	mov	r5, r3
 8001058:	f04f 0600 	mov.w	r6, #0
 800105c:	196b      	adds	r3, r5, r5
 800105e:	eb46 0406 	adc.w	r4, r6, r6
 8001062:	461a      	mov	r2, r3
 8001064:	4623      	mov	r3, r4
 8001066:	f7ff f8cd 	bl	8000204 <__aeabi_uldivmod>
 800106a:	4603      	mov	r3, r0
 800106c:	460c      	mov	r4, r1
 800106e:	461a      	mov	r2, r3
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <UART_SetConfig+0x384>)
 8001072:	fba3 1302 	umull	r1, r3, r3, r2
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2164      	movs	r1, #100	; 0x64
 800107a:	fb01 f303 	mul.w	r3, r1, r3
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	3332      	adds	r3, #50	; 0x32
 8001084:	4a27      	ldr	r2, [pc, #156]	; (8001124 <UART_SetConfig+0x384>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001092:	4498      	add	r8, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	461d      	mov	r5, r3
 8001098:	f04f 0600 	mov.w	r6, #0
 800109c:	46a9      	mov	r9, r5
 800109e:	46b2      	mov	sl, r6
 80010a0:	eb19 0309 	adds.w	r3, r9, r9
 80010a4:	eb4a 040a 	adc.w	r4, sl, sl
 80010a8:	4699      	mov	r9, r3
 80010aa:	46a2      	mov	sl, r4
 80010ac:	eb19 0905 	adds.w	r9, r9, r5
 80010b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80010b4:	f04f 0100 	mov.w	r1, #0
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80010c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80010c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80010c8:	4689      	mov	r9, r1
 80010ca:	4692      	mov	sl, r2
 80010cc:	eb19 0005 	adds.w	r0, r9, r5
 80010d0:	eb4a 0106 	adc.w	r1, sl, r6
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	461d      	mov	r5, r3
 80010da:	f04f 0600 	mov.w	r6, #0
 80010de:	196b      	adds	r3, r5, r5
 80010e0:	eb46 0406 	adc.w	r4, r6, r6
 80010e4:	461a      	mov	r2, r3
 80010e6:	4623      	mov	r3, r4
 80010e8:	f7ff f88c 	bl	8000204 <__aeabi_uldivmod>
 80010ec:	4603      	mov	r3, r0
 80010ee:	460c      	mov	r4, r1
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <UART_SetConfig+0x384>)
 80010f4:	fba3 1302 	umull	r1, r3, r3, r2
 80010f8:	095b      	lsrs	r3, r3, #5
 80010fa:	2164      	movs	r1, #100	; 0x64
 80010fc:	fb01 f303 	mul.w	r3, r1, r3
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	3332      	adds	r3, #50	; 0x32
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <UART_SetConfig+0x384>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	095b      	lsrs	r3, r3, #5
 800110e:	f003 0207 	and.w	r2, r3, #7
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4442      	add	r2, r8
 8001118:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800111a:	e1b2      	b.n	8001482 <UART_SetConfig+0x6e2>
 800111c:	40011000 	.word	0x40011000
 8001120:	40011400 	.word	0x40011400
 8001124:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4ad7      	ldr	r2, [pc, #860]	; (800148c <UART_SetConfig+0x6ec>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d005      	beq.n	800113e <UART_SetConfig+0x39e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4ad6      	ldr	r2, [pc, #856]	; (8001490 <UART_SetConfig+0x6f0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	f040 80d1 	bne.w	80012e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800113e:	f7ff fdcd 	bl	8000cdc <HAL_RCC_GetPCLK2Freq>
 8001142:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	469a      	mov	sl, r3
 8001148:	f04f 0b00 	mov.w	fp, #0
 800114c:	46d0      	mov	r8, sl
 800114e:	46d9      	mov	r9, fp
 8001150:	eb18 0308 	adds.w	r3, r8, r8
 8001154:	eb49 0409 	adc.w	r4, r9, r9
 8001158:	4698      	mov	r8, r3
 800115a:	46a1      	mov	r9, r4
 800115c:	eb18 080a 	adds.w	r8, r8, sl
 8001160:	eb49 090b 	adc.w	r9, r9, fp
 8001164:	f04f 0100 	mov.w	r1, #0
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001170:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001174:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001178:	4688      	mov	r8, r1
 800117a:	4691      	mov	r9, r2
 800117c:	eb1a 0508 	adds.w	r5, sl, r8
 8001180:	eb4b 0609 	adc.w	r6, fp, r9
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	4619      	mov	r1, r3
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	f04f 0400 	mov.w	r4, #0
 8001196:	0094      	lsls	r4, r2, #2
 8001198:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800119c:	008b      	lsls	r3, r1, #2
 800119e:	461a      	mov	r2, r3
 80011a0:	4623      	mov	r3, r4
 80011a2:	4628      	mov	r0, r5
 80011a4:	4631      	mov	r1, r6
 80011a6:	f7ff f82d 	bl	8000204 <__aeabi_uldivmod>
 80011aa:	4603      	mov	r3, r0
 80011ac:	460c      	mov	r4, r1
 80011ae:	461a      	mov	r2, r3
 80011b0:	4bb8      	ldr	r3, [pc, #736]	; (8001494 <UART_SetConfig+0x6f4>)
 80011b2:	fba3 2302 	umull	r2, r3, r3, r2
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	469b      	mov	fp, r3
 80011c0:	f04f 0c00 	mov.w	ip, #0
 80011c4:	46d9      	mov	r9, fp
 80011c6:	46e2      	mov	sl, ip
 80011c8:	eb19 0309 	adds.w	r3, r9, r9
 80011cc:	eb4a 040a 	adc.w	r4, sl, sl
 80011d0:	4699      	mov	r9, r3
 80011d2:	46a2      	mov	sl, r4
 80011d4:	eb19 090b 	adds.w	r9, r9, fp
 80011d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80011dc:	f04f 0100 	mov.w	r1, #0
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80011e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80011ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80011f0:	4689      	mov	r9, r1
 80011f2:	4692      	mov	sl, r2
 80011f4:	eb1b 0509 	adds.w	r5, fp, r9
 80011f8:	eb4c 060a 	adc.w	r6, ip, sl
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	4619      	mov	r1, r3
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	f04f 0400 	mov.w	r4, #0
 800120e:	0094      	lsls	r4, r2, #2
 8001210:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001214:	008b      	lsls	r3, r1, #2
 8001216:	461a      	mov	r2, r3
 8001218:	4623      	mov	r3, r4
 800121a:	4628      	mov	r0, r5
 800121c:	4631      	mov	r1, r6
 800121e:	f7fe fff1 	bl	8000204 <__aeabi_uldivmod>
 8001222:	4603      	mov	r3, r0
 8001224:	460c      	mov	r4, r1
 8001226:	461a      	mov	r2, r3
 8001228:	4b9a      	ldr	r3, [pc, #616]	; (8001494 <UART_SetConfig+0x6f4>)
 800122a:	fba3 1302 	umull	r1, r3, r3, r2
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2164      	movs	r1, #100	; 0x64
 8001232:	fb01 f303 	mul.w	r3, r1, r3
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	3332      	adds	r3, #50	; 0x32
 800123c:	4a95      	ldr	r2, [pc, #596]	; (8001494 <UART_SetConfig+0x6f4>)
 800123e:	fba2 2303 	umull	r2, r3, r2, r3
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001248:	4498      	add	r8, r3
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	469b      	mov	fp, r3
 800124e:	f04f 0c00 	mov.w	ip, #0
 8001252:	46d9      	mov	r9, fp
 8001254:	46e2      	mov	sl, ip
 8001256:	eb19 0309 	adds.w	r3, r9, r9
 800125a:	eb4a 040a 	adc.w	r4, sl, sl
 800125e:	4699      	mov	r9, r3
 8001260:	46a2      	mov	sl, r4
 8001262:	eb19 090b 	adds.w	r9, r9, fp
 8001266:	eb4a 0a0c 	adc.w	sl, sl, ip
 800126a:	f04f 0100 	mov.w	r1, #0
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001276:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800127a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800127e:	4689      	mov	r9, r1
 8001280:	4692      	mov	sl, r2
 8001282:	eb1b 0509 	adds.w	r5, fp, r9
 8001286:	eb4c 060a 	adc.w	r6, ip, sl
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	f04f 0400 	mov.w	r4, #0
 800129c:	0094      	lsls	r4, r2, #2
 800129e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80012a2:	008b      	lsls	r3, r1, #2
 80012a4:	461a      	mov	r2, r3
 80012a6:	4623      	mov	r3, r4
 80012a8:	4628      	mov	r0, r5
 80012aa:	4631      	mov	r1, r6
 80012ac:	f7fe ffaa 	bl	8000204 <__aeabi_uldivmod>
 80012b0:	4603      	mov	r3, r0
 80012b2:	460c      	mov	r4, r1
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b77      	ldr	r3, [pc, #476]	; (8001494 <UART_SetConfig+0x6f4>)
 80012b8:	fba3 1302 	umull	r1, r3, r3, r2
 80012bc:	095b      	lsrs	r3, r3, #5
 80012be:	2164      	movs	r1, #100	; 0x64
 80012c0:	fb01 f303 	mul.w	r3, r1, r3
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	3332      	adds	r3, #50	; 0x32
 80012ca:	4a72      	ldr	r2, [pc, #456]	; (8001494 <UART_SetConfig+0x6f4>)
 80012cc:	fba2 2303 	umull	r2, r3, r2, r3
 80012d0:	095b      	lsrs	r3, r3, #5
 80012d2:	f003 020f 	and.w	r2, r3, #15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4442      	add	r2, r8
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	e0d0      	b.n	8001482 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80012e0:	f7ff fce8 	bl	8000cb4 <HAL_RCC_GetPCLK1Freq>
 80012e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	469a      	mov	sl, r3
 80012ea:	f04f 0b00 	mov.w	fp, #0
 80012ee:	46d0      	mov	r8, sl
 80012f0:	46d9      	mov	r9, fp
 80012f2:	eb18 0308 	adds.w	r3, r8, r8
 80012f6:	eb49 0409 	adc.w	r4, r9, r9
 80012fa:	4698      	mov	r8, r3
 80012fc:	46a1      	mov	r9, r4
 80012fe:	eb18 080a 	adds.w	r8, r8, sl
 8001302:	eb49 090b 	adc.w	r9, r9, fp
 8001306:	f04f 0100 	mov.w	r1, #0
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001312:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001316:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800131a:	4688      	mov	r8, r1
 800131c:	4691      	mov	r9, r2
 800131e:	eb1a 0508 	adds.w	r5, sl, r8
 8001322:	eb4b 0609 	adc.w	r6, fp, r9
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	f04f 0400 	mov.w	r4, #0
 8001338:	0094      	lsls	r4, r2, #2
 800133a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800133e:	008b      	lsls	r3, r1, #2
 8001340:	461a      	mov	r2, r3
 8001342:	4623      	mov	r3, r4
 8001344:	4628      	mov	r0, r5
 8001346:	4631      	mov	r1, r6
 8001348:	f7fe ff5c 	bl	8000204 <__aeabi_uldivmod>
 800134c:	4603      	mov	r3, r0
 800134e:	460c      	mov	r4, r1
 8001350:	461a      	mov	r2, r3
 8001352:	4b50      	ldr	r3, [pc, #320]	; (8001494 <UART_SetConfig+0x6f4>)
 8001354:	fba3 2302 	umull	r2, r3, r3, r2
 8001358:	095b      	lsrs	r3, r3, #5
 800135a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	469b      	mov	fp, r3
 8001362:	f04f 0c00 	mov.w	ip, #0
 8001366:	46d9      	mov	r9, fp
 8001368:	46e2      	mov	sl, ip
 800136a:	eb19 0309 	adds.w	r3, r9, r9
 800136e:	eb4a 040a 	adc.w	r4, sl, sl
 8001372:	4699      	mov	r9, r3
 8001374:	46a2      	mov	sl, r4
 8001376:	eb19 090b 	adds.w	r9, r9, fp
 800137a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800137e:	f04f 0100 	mov.w	r1, #0
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800138a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800138e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001392:	4689      	mov	r9, r1
 8001394:	4692      	mov	sl, r2
 8001396:	eb1b 0509 	adds.w	r5, fp, r9
 800139a:	eb4c 060a 	adc.w	r6, ip, sl
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4619      	mov	r1, r3
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	f04f 0400 	mov.w	r4, #0
 80013b0:	0094      	lsls	r4, r2, #2
 80013b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80013b6:	008b      	lsls	r3, r1, #2
 80013b8:	461a      	mov	r2, r3
 80013ba:	4623      	mov	r3, r4
 80013bc:	4628      	mov	r0, r5
 80013be:	4631      	mov	r1, r6
 80013c0:	f7fe ff20 	bl	8000204 <__aeabi_uldivmod>
 80013c4:	4603      	mov	r3, r0
 80013c6:	460c      	mov	r4, r1
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b32      	ldr	r3, [pc, #200]	; (8001494 <UART_SetConfig+0x6f4>)
 80013cc:	fba3 1302 	umull	r1, r3, r3, r2
 80013d0:	095b      	lsrs	r3, r3, #5
 80013d2:	2164      	movs	r1, #100	; 0x64
 80013d4:	fb01 f303 	mul.w	r3, r1, r3
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	3332      	adds	r3, #50	; 0x32
 80013de:	4a2d      	ldr	r2, [pc, #180]	; (8001494 <UART_SetConfig+0x6f4>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	095b      	lsrs	r3, r3, #5
 80013e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013ea:	4498      	add	r8, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	469b      	mov	fp, r3
 80013f0:	f04f 0c00 	mov.w	ip, #0
 80013f4:	46d9      	mov	r9, fp
 80013f6:	46e2      	mov	sl, ip
 80013f8:	eb19 0309 	adds.w	r3, r9, r9
 80013fc:	eb4a 040a 	adc.w	r4, sl, sl
 8001400:	4699      	mov	r9, r3
 8001402:	46a2      	mov	sl, r4
 8001404:	eb19 090b 	adds.w	r9, r9, fp
 8001408:	eb4a 0a0c 	adc.w	sl, sl, ip
 800140c:	f04f 0100 	mov.w	r1, #0
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001418:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800141c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001420:	4689      	mov	r9, r1
 8001422:	4692      	mov	sl, r2
 8001424:	eb1b 0509 	adds.w	r5, fp, r9
 8001428:	eb4c 060a 	adc.w	r6, ip, sl
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4619      	mov	r1, r3
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	f04f 0400 	mov.w	r4, #0
 800143e:	0094      	lsls	r4, r2, #2
 8001440:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001444:	008b      	lsls	r3, r1, #2
 8001446:	461a      	mov	r2, r3
 8001448:	4623      	mov	r3, r4
 800144a:	4628      	mov	r0, r5
 800144c:	4631      	mov	r1, r6
 800144e:	f7fe fed9 	bl	8000204 <__aeabi_uldivmod>
 8001452:	4603      	mov	r3, r0
 8001454:	460c      	mov	r4, r1
 8001456:	461a      	mov	r2, r3
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <UART_SetConfig+0x6f4>)
 800145a:	fba3 1302 	umull	r1, r3, r3, r2
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	2164      	movs	r1, #100	; 0x64
 8001462:	fb01 f303 	mul.w	r3, r1, r3
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	3332      	adds	r3, #50	; 0x32
 800146c:	4a09      	ldr	r2, [pc, #36]	; (8001494 <UART_SetConfig+0x6f4>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	095b      	lsrs	r3, r3, #5
 8001474:	f003 020f 	and.w	r2, r3, #15
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4442      	add	r2, r8
 800147e:	609a      	str	r2, [r3, #8]
}
 8001480:	e7ff      	b.n	8001482 <UART_SetConfig+0x6e2>
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800148c:	40011000 	.word	0x40011000
 8001490:	40011400 	.word	0x40011400
 8001494:	51eb851f 	.word	0x51eb851f

08001498 <__libc_init_array>:
 8001498:	b570      	push	{r4, r5, r6, lr}
 800149a:	4e0d      	ldr	r6, [pc, #52]	; (80014d0 <__libc_init_array+0x38>)
 800149c:	4c0d      	ldr	r4, [pc, #52]	; (80014d4 <__libc_init_array+0x3c>)
 800149e:	1ba4      	subs	r4, r4, r6
 80014a0:	10a4      	asrs	r4, r4, #2
 80014a2:	2500      	movs	r5, #0
 80014a4:	42a5      	cmp	r5, r4
 80014a6:	d109      	bne.n	80014bc <__libc_init_array+0x24>
 80014a8:	4e0b      	ldr	r6, [pc, #44]	; (80014d8 <__libc_init_array+0x40>)
 80014aa:	4c0c      	ldr	r4, [pc, #48]	; (80014dc <__libc_init_array+0x44>)
 80014ac:	f000 f818 	bl	80014e0 <_init>
 80014b0:	1ba4      	subs	r4, r4, r6
 80014b2:	10a4      	asrs	r4, r4, #2
 80014b4:	2500      	movs	r5, #0
 80014b6:	42a5      	cmp	r5, r4
 80014b8:	d105      	bne.n	80014c6 <__libc_init_array+0x2e>
 80014ba:	bd70      	pop	{r4, r5, r6, pc}
 80014bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014c0:	4798      	blx	r3
 80014c2:	3501      	adds	r5, #1
 80014c4:	e7ee      	b.n	80014a4 <__libc_init_array+0xc>
 80014c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014ca:	4798      	blx	r3
 80014cc:	3501      	adds	r5, #1
 80014ce:	e7f2      	b.n	80014b6 <__libc_init_array+0x1e>
 80014d0:	08001508 	.word	0x08001508
 80014d4:	08001508 	.word	0x08001508
 80014d8:	08001508 	.word	0x08001508
 80014dc:	0800150c 	.word	0x0800150c

080014e0 <_init>:
 80014e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e2:	bf00      	nop
 80014e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014e6:	bc08      	pop	{r3}
 80014e8:	469e      	mov	lr, r3
 80014ea:	4770      	bx	lr

080014ec <_fini>:
 80014ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ee:	bf00      	nop
 80014f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014f2:	bc08      	pop	{r3}
 80014f4:	469e      	mov	lr, r3
 80014f6:	4770      	bx	lr
